package(
    default_visibility = ["//visibility:public"],
)

load(
    "@com_google_googleapis_imports//:imports.bzl",
    "cc_grpc_library",
    "cc_proto_library",
)
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@io_bazel_rules_go//proto:def.bzl", "go_proto_library")
load("@io_bazel_rules_go//go:def.bzl", "go_library")
load("@grpc_ecosystem_grpc_gateway//protoc-gen-openapiv2:defs.bzl", "protoc_gen_openapiv2")

proto_library(
    name = "speech_proto",
    srcs = [
        "speech.proto",
    ],
    deps = [
        "@com_google_googleapis//google/api:annotations_proto",
        "@com_google_googleapis//google/api:client_proto",
        "@com_google_googleapis//google/api:field_behavior_proto",
        "@com_google_googleapis//google/api:resource_proto",
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
)

cc_proto_library(
    name = "speech_cc_proto",
    deps = [":speech_proto"],
)

cc_grpc_library(
    name = "speech_cc_grpc",
    srcs = [":speech_proto"],
    grpc_only = True,
    deps = [":speech_cc_proto"],
)

# These Go targets are necessary for the gRPC-Gateway REST proxy
go_proto_library(
    name = "speech_go_proto",
    compilers = [
        "@grpc_ecosystem_grpc_gateway//:go_grpc",
        "@grpc_ecosystem_grpc_gateway//:go_apiv2",
        "@grpc_ecosystem_grpc_gateway//protoc-gen-grpc-gateway:go_gen_grpc_gateway",
    ],
    importpath = "gitlab.com/tiro-is/tiro-apis-gogen/tiro/speech/v1alpha",
    proto = ":speech_proto",
    deps = [
        "@go_googleapis//google/api:annotations_go_proto",
    ],
)

go_library(
    name = "go_default_library",
    embed = [":speech_go_proto"],
    importpath = "gitlab.com/tiro-is/tiro-apis-gogen/tiro/speech/v1alpha",
)

protoc_gen_openapiv2(
    name = "speech_protoc_gen_openapiv2",
    proto = ":speech_proto",
    single_output = True,  # Outputs a single swagger.json file.
)
